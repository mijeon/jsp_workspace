/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-19 07:24:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.jspshop.util.FileManager;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import java.io.File;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import com.jspshop.exception.ProductException;
import com.jspshop.exception.PsizeException;
import com.jspshop.exception.ColorException;
import com.jspshop.repository.PsizeDAO;
import com.jspshop.repository.ColorDAO;
import com.jspshop.repository.ProductDAO;
import org.apache.ibatis.session.SqlSession;
import com.jspshop.mybatis.MybatisConfig;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	MybatisConfig mybatisConfig=MybatisConfig.getInstance();
	ProductDAO productDAO=new ProductDAO();
	ColorDAO colorDAO=new ColorDAO();
	PsizeDAO psizeDAO=new PsizeDAO();
	
	//업로드 관련 설정 정보를 보유할 객체
	DiskFileItemFactory factory=new DiskFileItemFactory();
	

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.jspshop.repository.ProductDAO");
    _jspx_imports_classes.add("com.jspshop.mybatis.MybatisConfig");
    _jspx_imports_classes.add("com.jspshop.repository.PsizeDAO");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("com.jspshop.util.FileManager");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.jspshop.repository.ColorDAO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.jspshop.exception.ColorException");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("com.jspshop.exception.PsizeException");
    _jspx_imports_classes.add("com.jspshop.exception.ProductException");
    _jspx_imports_classes.add("org.apache.ibatis.session.SqlSession");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	//파라미터 받기
	int maxSize=5*(1024*1024);
	String path=application.getRealPath("/data/");
	factory.setSizeThreshold(maxSize);  //업로드 최대 사이즈 지정
	factory.setRepository(new File(path));  //임시 디렉토리 및 저장경로
	
	ServletFileUpload upload=new ServletFileUpload(factory);
	
	//업로드된 파라미터 분석
	List<FileItem> itemList=upload.parseRequest(request);  //요청객체를 매개변수로 넣음
	
	//넘어온 파라미터 수만큼 반복문 돌면서 파라미터 분석 
	for(FileItem item:itemList){  //반환형이 FileItem
		if(item.isFormField()){  //텍스트 필드라면
			
		}else{  //파일컴포넌트라면
			long time=System.currentTimeMillis();  //현재날짜
			String ext=FileManager.getExt(item.getName());
			
			System.out.println(path);
			item.write(new File(path+time+"."+ext));  //서버에 파일 저장
			Thread.sleep(500);
		}
	}

	//상품등록이란, 여러 테이블을 대상으로 DML이 수행되어야 하므로 대표적인 트렌잭션 상황의 업무임
	//따라서 DML을 수행하는 객체인 DAO들은 각자 커넥션을 취득하여 업무를 하는것이 아니라, 같은 커넥션
	//내에서 DML을 수행할 수 있도록 SqlSession을 공유하자 따라서 SqlSession에 대한 취득을 여기서(서블릿) 처리
	
	SqlSession sqlSession=mybatisConfig.getSqlSession();

	//setter 를 이용한 객체 주입
	//productDAO.setSqlSession(sqlSession);
	//colorDAO.setSqlSession(sqlSession);
	//psizeDAO.setSqlSession(sqlSession);
	
	/*
	//dao에게 일시키기
	try{
		productDAO.insert(null);
		colorDAO.insert(null);
		psizeDAO.insert(null);
		sqlSession.commit();
		
	}catch(ProductException e){
		sqlSession.rollback();
	}catch(ColorException e){
		sqlSession.rollback();
	}catch(PsizeException e){
		sqlSession.rollback();
	}finally{
		mybatisConfig.release(sqlSession);
	}
	
	//업무가 끝나면 여기서 sqlSession 닫기
	mybatisConfig.release(sqlSession);
	*/
	

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
