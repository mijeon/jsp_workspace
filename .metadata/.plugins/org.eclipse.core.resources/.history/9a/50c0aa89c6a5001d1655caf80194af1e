package com.mvc3.controller;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/*
	모든 요청을 받는 1차 진입점이 되어야 하므로, mvc에서의 컨트롤로써의 역활을 서블릿이 담당하면 됨
	1) 요청 받음 (메인 컨트롤러)
	2) 요청 분석 (메인 컨트롤러)
	3) 로직객체에게 일 시킴 (서브 컨트롤러)
	4) 결과가 존재한다면 결과 저장 (서브 컨트롤러) -> 어디에 (application, session, request)
	5) 알맞는 결과 페이지를 보여줌 (메인 컨트롤러)
*/
public class DispatcherServlet extends HttpServlet {
	//2단계 업무인 '요청 분석' 단계에서 if문을 사용하지 않으려면 적어도 2단계 이전에는
	//이미 Properties가 준비되어 있어야 함 따라서 서블릿이 태어날 때 이미 준비해 놓자
	Properties props;
	FileInputStream fis;
	
	//ServletConfig : 서블릿에 전달된 환경 정보를 담고 있는 객체
	public void init(ServletConfig config) throws ServletException {
		props=new Properties();  //key-value 쌍을 해석할 수 있는 객체 생성
		
		try {
			//getRealPath()를 이용하려면, jsp의 경우 내장객체 중 application 내장객체를 이용하면 됨
			//하지만 이 영역은 서블릿이기에 application 내장객체의 자료형인 ServletContext 이용
			
			//서버가 가동될 때 서버의 전역적 정보를 가진 객체
			//jsp의 application 내장객체임
			ServletContext context=config.getServletContext();  
			String realPath=context.getRealPath("/WEB-INF/mapping.data");
			System.out.println("매핑파일의 실제 파일 위치는 "+realPath);
			
			fis=new FileInputStream(realPath);  //(매핑파일의 위치)
			props.load(fis);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doRequest(request, response);
	}
	
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doRequest(request, response);
	}
	
	protected void doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//1단계) 요청 받음
		System.out.println("나 호출됨");
		
		//파라미터 인코딩 처리
		request.setCharacterEncoding("utf-8");
		
		//2단계) 요청 분석
		String uri=request.getRequestURI();
		System.out.println("당신의 요청 uri는 "+uri);
		
		String controllerPath=props.getProperty(uri); 
		System.out.println("요청 uri에 동작할 하위 컨트롤러의 경로는 "+controllerPath);
		try {
			//정적 영역에 원본을 올리고, 그 반환된 결과로 Class 자료형을 반환받자
			Class controllerClass=Class.forName(controllerPath);  //static 영역에 올라감 (거푸집 원본)
			
			//인스턴스 올리기
			//인스턴스를 메모리에 올리는 방법은 new 연산자만 있는 것이 아님
			Controller controller=(Controller)controllerClass.getDeclaredConstructor().newInstance();  //new 연산자 대체
			controller.execute(request, response);
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		
		/*
		if(uri.equals("/blood.do")) {
			System.out.println("혈액형 담당 컨트롤러에게 전달할 예정");
			BloodController controller=new BloodController();
			controller.execute(request, response);  //전달
			
			//5단계) 결과가 있을 경우 포워딩, 결과가 없을 경우 redirect(재접속)
			RequestDispatcher dis=request.getRequestDispatcher("/blood/result.jsp");  //포워딩 하고 싶은 주소 
			dis.forward(request, response);  //전달
			
		}else if(uri.equals("/movie.do")) {
			System.out.println("영화 담당 컨트롤러에게 전달할 예정");
			MovieController controller=new MovieController();
			controller.handle(request, response);
		}
		*/
		
	//5단계) 결과가 있을 경우 포워딩, 결과가 없을 경우 redirect(재접속)
	RequestDispatcher dis=request.getRequestDispatcher("/movie/result.jsp");  //포워딩 하고 싶은 주소 
	dis.forward(request, response);  //전달
	}
}
